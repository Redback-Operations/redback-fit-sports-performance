date_col_name <- grep("Date", colnames(heda), value = TRUE)
# Step 5: Convert the Date column to a Date datatype using mutate
heda <- heda %>%
mutate(Date = dmy(date_col_name))
# Display the first few rows to confirm the Date column was added correctly
head(heda)
print(colnames(heda))
# Step 1: Read the CSV file normally, including both header rows
heda_raw <- read.csv("https://data.gov.au/data/dataset/6bfec5ea-207e-4d67-8965-c7e72290844b/resource/33d84954-b13a-4f4e-afb9-6468e287fa3c/download/govhack3.csv",
header = FALSE)
# Step 2: Extract and combine the first two rows to form the final column names
header1 <- as.character(heda_raw[1, ])  # First row
header2 <- as.character(heda_raw[2, ])  # Second row
# Combine the two headers to form descriptive and unique column names
combined_header <- ifelse(header1 == "", header2, paste(header1, header2, sep = "."))
# Step 3: Remove the first two rows and assign new column names
heda <- heda_raw[-c(1, 2), ]
colnames(heda) <- make.names(combined_header, unique = TRUE)
# Step 4: Identify the correct column name for Date based on your combined header
date_col_name <- grep("Date", colnames(heda), value = TRUE)
# Step 5: Convert the Date column to a Date datatype using mutate
heda <- heda %>%
mutate(Date = dmy(!!sym(date_col_name)))
# Display the first few rows to confirm the Date column was added correctly
head(heda)
print(colnames(heda))
# Step 1: Read the CSV file normally, including both header rows
heda_raw <- read.csv("https://data.gov.au/data/dataset/6bfec5ea-207e-4d67-8965-c7e72290844b/resource/33d84954-b13a-4f4e-afb9-6468e287fa3c/download/govhack3.csv",
header = FALSE)
# Step 2: Extract and combine the first two rows to form the final column names
header1 <- as.character(heda_raw[1, ])  # First row
header2 <- as.character(heda_raw[2, ])  # Second row
# Combine the two headers to form descriptive and unique column names
combined_header <- paste(header1, header2, sep = ".")
# Step 3: Remove the first two rows and assign new column names
heda <- heda_raw[-c(1, 2), ]
colnames(heda) <- make.names(combined_header, unique = TRUE)
# Step 4: Identify the correct column name for Date based on your combined header
date_col_name <- grep("Date", colnames(heda), value = TRUE)
# Step 5: Convert the Date column to a Date datatype using mutate
heda <- heda %>%
mutate(Date = dmy(!!sym(date_col_name)))
# Display the first few rows to confirm the Date column was added correctly
head(heda)
print(colnames(heda))
# Step 1: Read the CSV file normally, including both header rows
heda_raw <- read.csv("https://data.gov.au/data/dataset/6bfec5ea-207e-4d67-8965-c7e72290844b/resource/33d84954-b13a-4f4e-afb9-6468e287fa3c/download/govhack3.csv",
header = FALSE)
# Step 2: Extract and combine the first two rows to form the final column names
header1 <- as.character(heda_raw[1, ])  # First row
header2 <- as.character(heda_raw[2, ])  # Second row
# Combine the two headers to form descriptive and unique column names
combined_header <- paste(header1, header2, sep = ".")
# Step 3: Remove the first two rows and assign new column names
heda <- heda_raw[-c(1, 2), ]
colnames(heda) <- make.names(combined_header, unique = TRUE)
# Step 4: Identify the correct column name for Date based on your combined header
date_col_name <- grep("Date", colnames(heda), value = TRUE)
# Step 5: Convert the Date column to a Date datatype using mutate
heda <- heda %>%
mutate(Date = dmy(!!sym(date_col_name)))
# Display the first few rows to confirm the Date column was added correctly
head(heda)
print(colnames(heda))
royal_perth_data <- heda %>%
select(Date, Royal.Perth.Hospital.Attendance, .Admissions)
ggplot(royal_perth_data, aes(x = Date)) +
geom_line(aes(y = Royal.Perth.Hospital.Attendance, color = "Attendance")) +
geom_line(aes(y = .Admissions, color = "Admissions")) +
labs(title = "Attendance and Admissions Over Time at Royal Perth Hospital",
x = "Date",
y = "Count",
color = "Type") +
royal_perth_data <- heda %>%
select(Date, Royal.Perth.Hospital.Attendance, .Admissions)
ggplot(royal_perth_data, aes(x = Date)) +
geom_line(aes(y = Royal.Perth.Hospital.Attendance, color = "Attendance")) +
geom_line(aes(y = .Admissions, color = "Admissions")) +
labs(title = "Attendance and Admissions Over Time at Royal Perth Hospital",
x = "Date",
y = "Count",
color = "Type")
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = TRUE)
library(tidyverse)
library(nycflights13)
flights %>%
sapply(class)
library(tidyverse)
library(nycflights13)
library(lubridate)
tz(flights$time_hour)
flights <- flights %>%
mutate(time_hour = force_tz(time_hour,
tzone = "America/New_York"))
flights <- flights %>%
mutate(sched_dep_datetime = make_datetime(year,
month,
day,
hour,
minute))
make_datetime_100 <- function(year, month, day, time) {
make_datetime(year,
month,
day,
time %/% 100,
time %% 100)
}
flights <- flights %>%
#  filter(!is.na(dep_time), !is.na(arr_time)) %>%
mutate(
dep_time = make_datetime_100(year, month, day, dep_time),
arr_time = make_datetime_100(year, month, day, arr_time),
sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)
)
flights <- flights %>%
mutate(sched_dep_date = as_date(sched_dep_time))
class(flights$sched_dep_time)
class(flights$sched_dep_date)
flights %>%
count(sched_dep_date) %>%
ggplot(aes(x = sched_dep_date, y = n)) +
geom_line()
str(heda)
heda <- heda %>%
mutate(across(starts_with("Royal.Perth.Hospital"), ~as.numeric(as.character(.))))
str(heda)
heda <- heda %>%
mutate(
Royal.Perth.Hospital.Attendance = as.numeric(as.character(Royal.Perth.Hospital.Attendance)),
.Admissions = as.numeric(as.character(.Admissions))
)
royal_perth_data <- heda %>%
select(Date, Royal.Perth.Hospital.Attendance, .Admissions)
ggplot(royal_perth_data, aes(x = Date)) +
geom_line(aes(y = Royal.Perth.Hospital.Attendance, color = "Attendance")) +
geom_line(aes(y = .Admissions, color = "Admissions")) +
labs(title = "Attendance and Admissions Over Time at Royal Perth Hospital",
x = "Date",
y = "Count",
color = "Type")
monday_data <- heda %>%
mutate(weekday = wday(Date, label = TRUE)) %>%
filter(weekday == 'Mon') %>%
count(Date) %>%
ggplot(aes(x = Date, y = n)) +
geom_line() +
labs(title = "Number of Records on Mondays Over Time",
x = "Date",
y = "Number of Records")
# Example for Friday
friday_data <- heda %>%
mutate(weekday = wday(Date, label = TRUE)) %>%
filter(weekday == 'Fri') %>%
count(Date) %>%
ggplot(aes(x = Date, y = n)) +
geom_line() +
labs(title = "Number of Records on Fridays Over Time",
x = "Date",
y = "Number of Records")
monday_data <- heda %>%
mutate(weekday = wday(Date, label = TRUE)) %>%
filter(weekday == 'Mon') %>%
count(Date) %>%
ggplot(aes(x = Date, y = n)) +
geom_line() +
labs(title = "Number of Records on Mondays Over Time",
x = "Date",
y = "Number of Records")
# Example for Friday
friday_data <- heda %>%
mutate(weekday = wday(Date, label = TRUE)) %>%
filter(weekday == 'Fri') %>%
count(Date) %>%
ggplot(aes(x = Date, y = n)) +
geom_line() +
labs(title = "Number of Records on Fridays Over Time",
x = "Date",
y = "Number of Records")
print(monday_data)
print(friday_data)
# Example for plotting data for Mondays
monday_data <- heda %>%
mutate(weekday = wday(Date, label = TRUE)) %>%
filter(weekday == 'Mon') %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = Royal.Perth.Hospital.Attendance, color = "Attendance")) +
geom_line(aes(y = .Admissions, color = "Admissions")) +
labs(title = "Attendance and Admissions on Mondays at Royal Perth Hospital",
x = "Date",
y = "Count",
color = "Type")
# Example for plotting data for Fridays
friday_data <- heda %>%
mutate(weekday = wday(Date, label = TRUE)) %>%
filter(weekday == 'Fri') %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = Royal.Perth.Hospital.Attendance, color = "Attendance")) +
geom_line(aes(y = .Admissions, color = "Admissions")) +
labs(title = "Attendance and Admissions on Fridays at Royal Perth Hospital",
x = "Date",
y = "Count",
color = "Type")
# Print the plots for comparison
print(monday_data)
print(friday_data)
date_col_name <- grep("Date", colnames(heda), value = TRUE)
heda <- heda %>%
mutate(Date = dmy(!!sym(date_col_name)))
heda_raw <- read.csv("https://data.gov.au/data/dataset/6bfec5ea-207e-4d67-8965-c7e72290844b/resource/33d84954-b13a-4f4e-afb9-6468e287fa3c/download/govhack3.csv",
header = FALSE)
header1 <- as.character(heda_raw[1, ])  # First row
header2 <- as.character(heda_raw[2, ])  # Second row
combined_header <- paste(header1, header2, sep = ".")
heda <- heda_raw[-c(1, 2), ]
colnames(heda) <- make.names(combined_header, unique = TRUE)
date_col_name <- grep("Date", colnames(heda), value = TRUE)
heda <- heda %>%
mutate(Date = dmy(!!sym(date_col_name)))
head(heda)
print(colnames(heda))
heda <- heda %>%
mutate(
Royal.Perth.Hospital.Attendance = as.numeric(as.character(Royal.Perth.Hospital.Attendance)),
.Admissions = as.numeric(as.character(.Admissions))
)
royal_perth_data <- heda %>%
select(Date, Royal.Perth.Hospital.Attendance, .Admissions)
ggplot(royal_perth_data, aes(x = Date)) +
geom_line(aes(y = Royal.Perth.Hospital.Attendance, color = "Attendance")) +
geom_line(aes(y = .Admissions, color = "Admissions")) +
labs(title = "Attendance and Admissions Over Time at Royal Perth Hospital",
x = "Date",
y = "Count",
color = "Type")
monday_data <- heda %>%
mutate(weekday = wday(Date, label = TRUE)) %>%
filter(weekday == 'Mon') %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = Royal.Perth.Hospital.Attendance, color = "Attendance")) +
geom_line(aes(y = .Admissions, color = "Admissions")) +
labs(title = "Attendance and Admissions on Mondays at Royal Perth Hospital",
x = "Date",
y = "Count",
color = "Type")
friday_data <- heda %>%
mutate(weekday = wday(Date, label = TRUE)) %>%
filter(weekday == 'Fri') %>%
ggplot(aes(x = Date)) +
geom_line(aes(y = Royal.Perth.Hospital.Attendance, color = "Attendance")) +
geom_line(aes(y = .Admissions, color = "Admissions")) +
labs(title = "Attendance and Admissions on Fridays at Royal Perth Hospital",
x = "Date",
y = "Count",
color = "Type")
print(monday_data)
print(friday_data)
knitr::opts_chunk$set(echo = TRUE)
print(my_unit_info)
print(my_unit_info)
print(my_unit_info)
my_unit_info <- "Ananth Vandothra, SIT741, Pass Task T06.P6"
print(my_unit_info)
my_unit_info <- "Ananth Vandothra, SIT741, Pass Task T06.P6"
print(my_unit_info)
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(tibble)
library(bbmle)
library(broom)
my_unit_info <- "Ananth Vandothra, SIT741, Pass Task T04.P4"
print(my_unit_info)
library(gapminder)
install.packages("gapminder")
install.packages("mgcv")
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(mgcv)
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(mgcv)
library(dplyr)
afghanistan_data <- gapminder %>%
filter(country == "Afghanistan")
View(afghanistan_data)
View(problematic_rows)
View(heda_clean)
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(mgcv)
library(dplyr)
my_unit_info <- "Ananth Vandothra, SIT741, Pass Task T06.P6"
print(my_unit_info)
afghanistan_data <- gapminder %>%
filter(country == "Afghanistan")
afghanistan_data <- subset(gapminder, country == "Afghanistan")
gam_model <- gam(lifeExp ~ s(pop), data = afghanistan_data)
summary(gam_model)
plot(gam_model)
gam_model_tp_default <- gam(lifeExp ~ s(pop, bs = "tp"), data = afghanistan_data)
summary(gam_model_tp_default)
# Check the AIC value
AIC(gam_model_tp_default)
gam_model_tp_default <- gam(lifeExp ~ s(pop, bs = "cr"), data = afghanistan_data)
gam_model_tp_default <- gam(lifeExp ~ s(pop, bs = "cr"), data = afghanistan_data)
summary(gam_model_tp_default)
# Check the AIC value
AIC(gam_model_tp_default)
gam_model_cr <- gam(lifeExp ~ s(pop, bs = "cr"), data = afghanistan_data)
summary(gam_model_cr)
# Check the AIC value
AIC(gam_model_cr)
gam_model_cr <- gam(lifeExp ~ s(pop, bs = "cr"), data = afghanistan_data)
summary(gam_model_cr)
plot(gam_model_cr)
AIC(gam_model_cr)
gam_model_cr_k10 <- gam(lifeExp ~ s(pop, bs = "cr", k = 10), data = afghanistan_data)
summary(gam_model_cr_k10)
plot(gam_model_cr_k10)
AIC(gam_model_cr_k10)
gam_model_cr_k15 <- gam(lifeExp ~ s(pop, bs = "cr", k = 15), data = afghanistan_data)
gam_model_cr_k15 <- gam(lifeExp ~ s(pop, bs = "cr", k = 5), data = afghanistan_data)
gam_model_cr_k15 <- gam(lifeExp ~ s(pop, bs = "cr", k = 5), data = afghanistan_data)
summary(gam_model_cr_k15)
plot(gam_model_cr_k15)
AIC(gam_model_cr_k15)
gam_model_cr_k3 <- gam(lifeExp ~ s(pop, bs = "cr", k = 3), data = afghanistan_data)
summary(gam_model_cr_k3)
plot(gam_model_cr_k3)
AIC(gam_model_cr_k3)
install.packages("rsample")
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(mgcv)
library(dplyr)
library(rsample)
# Load the abalone dataset from the UCI repository
abalone <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", sep = ",")
# View the first few rows to verify
head(abalone)
abalone <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", sep = ",")
head(abalone)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "WholeWeight",
"ShuckedWeight", "VisceraWeight", "ShellWeight", "Rings")
head(abalone)
abalone <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", sep = ",")
head(abalone)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "WholeWeight",
"ShuckedWeight", "VisceraWeight", "ShellWeight", "Rings")
head(abalone)
abalone_cv <- vfold_cv(abalone, v = 10)
abalone_cv
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(mgcv)
library(dplyr)
library(rsample)
library(broom)
abalone <- read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/abalone/abalone.data", sep = ",")
head(abalone)
colnames(abalone) <- c("Sex", "Length", "Diameter", "Height", "WholeWeight",
"ShuckedWeight", "VisceraWeight", "ShellWeight", "Rings")
head(abalone)
set.seed(100)
rs_obj <- vfold_cv(abalone, v = 10)
fit_gam <- function(splt, ...) {
gam(..., data = analysis(splt))
}
predict_gam <- function(splt, mod, ...) {
broom::augment(mod, newdata = assessment(splt))
}
fit_gam <- function(splt, ...) {
gam(..., data = analysis(splt))
}
predict_gam <- function(splt, mod, ...) {
broom::augment(mod, newdata = assessment(splt))
}
rs_obj <- rs_obj %>%
mutate(models = map(splits, fit_gam,
Rings ~ s(Length) + s(Diameter) + s(Height) + s(WholeWeight) +
s(ShuckedWeight) + s(VisceraWeight) + s(ShellWeight)))
install.packages("purrr")
install.packages("purrr")
library(purrr)
fit_gam <- function(splt, ...) {
gam(..., data = analysis(splt))
}
predict_gam <- function(splt, mod, ...) {
broom::augment(mod, newdata = assessment(splt))
}
rs_obj <- rs_obj %>%
mutate(models = map(splits, fit_gam,
Rings ~ s(Length) + s(Diameter) + s(Height) + s(WholeWeight) +
s(ShuckedWeight) + s(VisceraWeight) + s(ShellWeight)))
rs_obj <- rs_obj %>%
mutate(predictions = map2(splits, models, predict_gam))
rs_obj
install.packages("yardstick")
knitr::opts_chunk$set(echo = TRUE)
library(gapminder)
library(mgcv)
library(dplyr)
library(rsample)
library(broom)
library(purrr)
library(yardstick)
fit_gam <- function(splt, ...) {
gam(..., data = analysis(splt))
}
predict_gam <- function(splt, mod, ...) {
broom::augment(mod, newdata = assessment(splt))
}
rs_obj <- rs_obj %>%
mutate(models = map(splits, fit_gam,
Rings ~ s(Length) + s(Diameter) + s(Height) + s(WholeWeight) +
s(ShuckedWeight) + s(VisceraWeight) + s(ShellWeight)))
rs_obj <- rs_obj %>%
mutate(predictions = map2(splits, models, predict_gam))
rs_obj
rs_obj
knitr::opts_chunk$set(echo = TRUE, warning = FALSE, message = FALSE, eval = TRUE)
rs_obj
library(yardstick)
rs_obj <- rs_obj %>%
mutate(errs = map_dbl(predictions,
function(x, ...)
rmse(x, ...)$.estimate,
lifeExp,
.fitted))
rs_obj <- rs_obj %>%
mutate(errs = map_dbl(predictions, function(x) {
rmse(truth = x$Rings, estimate = x$.fitted)$.estimate
}))
rs_obj
rs_obj
rs_obj <- rs_obj %>%
mutate(errs = map_dbl(predictions, function(x) {
rmse(truth = x$Rings, estimate = x$.fitted)$.estimate
}))
rs_obj <- rs_obj %>%
mutate(errs = map_dbl(predictions, function(x) {
rmse(truth = x$Rings, estimate = x$.fitted)$.estimate
}))
rs_obj <- rs_obj %>%
mutate(errs = map_dbl(predictions, function(x) {
rmse(truth = x$Rings, estimate = x$.fitted)$.estimate
}))
# Calculate the RMSE for each fold using the desired structure
rs_obj <- rs_obj %>%
mutate(errs = map_dbl(predictions,
function(x, ...)
rmse(x, ...)$.estimate,  # Calculate RMSE using the .fitted predictions
Rings,                    # Truth column
.fitted))                 # Predicted values column
# View the result
rs_obj
library(MASS)
cor_matrix <- matrix(c(
1,  0.5, -0.3, -0.4,  # Heart Rate
0.5,  1, -0.4, -0.5,  # Reaction Time
-0.3, -0.4,  1,  0.3,  # Swing Speed
-0.4, -0.5,  0.3,  1   # Grip Pressure
), nrow = 4, ncol = 4)
# Means and standard deviations for the features
means <- c(120, 480, 30, 30)
sds <- c(20, 50, 5, 10)
# Making 500 observations
data <- mvrnorm(n = 500, mu = means, Sigma = diag(sds) %*% cor_matrix %*% diag(sds))
# data frame
batting_data <- data.frame(
Heart_Rate = data[, 1],
Reaction_Time = data[, 2],
Swing_Speed = data[, 3],
Grip_Pressure = data[, 4]
)
# Keeping feature within realistic ranges
batting_data$Heart_Rate <- pmax(pmin(batting_data$Heart_Rate, 180), 70)
batting_data$Reaction_Time <- pmax(pmin(batting_data$Reaction_Time, 700), 400)
batting_data$Swing_Speed <- pmax(pmin(batting_data$Swing_Speed, 40), 20)
batting_data$Grip_Pressure <- pmax(pmin(batting_data$Grip_Pressure, 50), 10)
write.csv(batting_data, "batting_data.csv", row.names = FALSE)
head(batting_data)
setwd("~/Documents/SIT764/Redback capstone/redback-fit-sports-performance/Cricket Analysis/Batting Analysis ")
library(MASS)
cor_matrix <- matrix(c(
1,  0.5, -0.3, -0.4,  # Heart Rate
0.5,  1, -0.4, -0.5,  # Reaction Time
-0.3, -0.4,  1,  0.3,  # Swing Speed
-0.4, -0.5,  0.3,  1   # Grip Pressure
), nrow = 4, ncol = 4)
# Means and standard deviations for the features
means <- c(120, 480, 30, 30)
sds <- c(20, 50, 5, 10)
# Making 500 observations
data <- mvrnorm(n = 500, mu = means, Sigma = diag(sds) %*% cor_matrix %*% diag(sds))
# data frame
batting_data <- data.frame(
Heart_Rate = data[, 1],
Reaction_Time = data[, 2],
Swing_Speed = data[, 3],
Grip_Pressure = data[, 4]
)
# Keeping feature within realistic ranges
batting_data$Heart_Rate <- pmax(pmin(batting_data$Heart_Rate, 180), 70)
batting_data$Reaction_Time <- pmax(pmin(batting_data$Reaction_Time, 700), 400)
batting_data$Swing_Speed <- pmax(pmin(batting_data$Swing_Speed, 40), 20)
batting_data$Grip_Pressure <- pmax(pmin(batting_data$Grip_Pressure, 50), 10)
write.csv(batting_data, "batting_data.csv", row.names = FALSE)
head(batting_data)
